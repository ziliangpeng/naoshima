version: '2'

# TODO: compose supports 'extends', so we can abstract common bot logic into gneral-bot service
# TODO: compose supports `-f` to load different config files. Can implement some one-off jobs in another file
# TODO: maybe can use environment variable (either Dockerfile level or compose level) to customize one bot service
services:
#  ardb:
#    # docker-compose up -d ardb
#    image: lupino/ardb-server
#    container_name: ardb-server
#    ports:
#      - "6379:16379"
#    volumes:
#      - /data/ig-ardb:/var/lib/ardb
  ardb-2:
  # user https://github.com/yaauie/redis-copy/ to dump redis from old redis to here
    build:
      context: ../docker
      dockerfile: ardb.Dockerfile
      args:
        engine: leveldb
    container_name: ardb-server-2
    ports:
      - "6379:16379"
    volumes:
      - /data/ig-ardb-2:/var/lib/ardb
#  ardb-cache:
#    image: lupino/ardb-server
#    container_name: ardb-server-cache
#    ports:
#      - "16379:16379"
#    volumes:
#      - /data/ig-ardb-cache:/var/lib/ardb
  ardb-cache-2:
    build:
      context: ../docker
      dockerfile: ardb.Dockerfile
      args:
        engine: leveldb
    container_name: ardb-server-cache-2
    ports:
      - "26379:16379"
#    volumes:
#      - /data/ig-ardb-cache-2:/var/lib/ardb
  redis-cache:
    image: redis:2.8
    container_name: redis-cache
#  redis:
#    image: redis:2.8
#    container_name: redis-fun
#    links:
#      - ardb-2:redis
#      - ardb-cache:redis-cache
#      - ardb-cache-2:redis-cache-2
  prometheus-push-gateway:
    image: prom/pushgateway:v0.5.0
    ports:
      - "9091:9091"
  prometheus:
    build:
      context: .
      dockerfile: prom.Dockerfile
    volumes:
      - /data/ig-prometheus:/prometheus
    links:
     - prometheus-push-gateway:prometheus-push-gateway
    ports:
      - "9090:9090"
  influxdb:
    image: influxdb:1.5.3
    volumes:
      - /data/ig-influx:/var/lib/influxdb
    ports:
      - "8086:8086"  #  HTTP API
      - "8083:8083"  #  Admin interface
  grafana:
    image: grafana/grafana:5.1.3
    volumes:
      - /data/ig-grafana:/var/lib/grafana
    links:
     - prometheus:prometheus
    ports:
      - "3000:3000"
  goproxy:
    build:
      context: .
      dockerfile: go.Dockerfile
    container_name: goproxy
    entrypoint:
      - "./main"
      - "-t"
      - "proxy"
  bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    # links is deprecated. we want to migrate to docker's user defined network.
    # we may also provision ardb inside here (bot own its data storage)
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
  z-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "z"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
     - goproxy:goproxy
  basebot:
    build: .  # TODO: if we publish this image in CI, we can pull from registry
    volumes:
      - /data/ig:/data/ig
      - ./user_config.local:/instagram/user_config.local
    environment:
      - DD_HOST
      - PROM_HOST
  airbnb-bot:
    extends:
      service: basebot
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "airbnb"
    links:
     - ardb-2:redis
     - ardb-cache-2:redis-cache-2
  v-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "v"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  mc-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "mc"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  hix-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "hix"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  newdone-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
      - ./user_config.local:/instagram/user_config.local
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "newdone"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  let-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "let"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
     - redis-cache:redis-cache-3
  eva-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "eva"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  eaxy-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "eaxy"
    links:
     - ardb-2:redis
#     - ardb-cache:redis-cache
     - ardb-cache-2:redis-cache-2
#     - redis-cache:redis-cache-3
  b1-bot:
    build: .
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "bot.py"
      - "-u"
      - "b1"
    links:
     - ardb-2:redis
     - ardb-cache-2:redis-cache-2
  likes:
    build:
      context: .
      dockerfile: go.Dockerfile
    container_name: ig-likes
    entrypoint:
      - "/app/main"
      - "-t"
      - "likes"
      - "-u"
  follow:
    build:
      context: .
      dockerfile: go.Dockerfile
    container_name: ig-follow
    entrypoint:
      - "/app/main"
      - "-t"
      - "follow"
      - "-u"
  post:
    build: .
    container_name: ig-post
    volumes:
      - /data/ig:/data/ig
    environment:
      - DD_HOST
      - PROM_HOST
    entrypoint:
      - "python"
      - "post.py"
      - "-u"
    links:
     - ardb-2:redis
     - ardb-cache-2:redis-cache-2

#We need a way to achieve the following:
#- one click to bring up all of the several accounts on prod
#- one click to bring up another account on dev
#
#Existing tools:
#- runit service
#  - auto start after reboot
#  - can monitor status of each
#  - make sure always up, and exactly one instance
#- docker-compose run
#  - parameterizable of service definition
#  - need to manually run (cannot survive reboot)
#  - will have N instance if run N times
#- docker-compose up
#  - not parameteriable
#  - exactly one instance
#  - need manually run (cannot survive reboot)
#
#Solution:
#- runit + compose run
#  - one docker-compose service, several runit service
#- docker-compose up
#  - need to run individually for each account, unless prod and dev have different difinition file
