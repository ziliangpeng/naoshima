# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - setup_remote_docker

      - checkout

      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "requirements.txt" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-
      #
      # - run:
      #     name: install dependencies
      #     command: |
      #       python3 -m venv venv
      #       . venv/bin/activate
      #       pip install -r requirements.txt
      #
      # - save_cache:
      #     paths:
      #       - ./venv
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      # - run:
      #   name: dir size
      #   command: |
      #     du -h -d 0
      #     du -d 0

      - run:
          name: build reckless container
          command: |
            cd reckless
            docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            docker build -t reckless .
            docker tag reckless ziliang/reckless
            docker images
            docker push ziliang/reckless

      - run:
          name: build common swarm images
          command: |
            cd docker/swarm/common
            cd prometheus &&
              ./build

      #      . venv/bin/activate
      #      python manage.py test

      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports
workflows:
  version: 2
  insert_workflow_name:
    jobs:
      - build:
          context: default
