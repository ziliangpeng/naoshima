#include <cstdio>
#include <cstring>
#include <cmath>

#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <string>
using namespace std;

#define REP(A, B) for (int A = 0; A < B; ++A)
#define FOR(A, B, C) for (int A = B; A < C; ++A)
#define SZ(A) (A.size())
#define PB push_back
#define ALL(X) X.begin(), X.end()
typedef long long LL;
typedef vector<int> VI;
typedef string STR;

class CountingSeries {
  LL intersect(LL a, LL b, LL c, LL d, LL upperBound) {
    if (d == 1) {
      if (c >= a && c <= upperBound && (c - a) % b == 0) return 1;
      else return 0;
    } else {
      int ans = 0;
      for(LL target = c; target <= upperBound; target *= d) {
        if (target >= a && (target - a) % b == 0) ans++;
      }
      return ans;
    }
  }

  LL prog(LL a, LL b, LL upperBound) {
    if (upperBound < a) return 0;
    LL cnt = (upperBound - a) / b + 1;
    return cnt;
  }

  LL geo(LL c, LL d, LL upperBound) {
    if (d == 1) {
      if (c <= upperBound) return 1;
      else return 0;
    } else {
      int ans = 0;
      for(LL target = c; target <= upperBound; target *= d) {
        ans++;
      }
      return ans;
    }
  }

public:
  long long countThem(long long a, long long b, long long c, long long d, long long upperBound) {
    return prog(a, b, upperBound)
          + geo(c, d, upperBound)
          - intersect(a, b, c, d, upperBound);
  }
};
 
 
//// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, long long p4, bool hasAnswer, long long p5) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
  cout << "]" << endl;
  CountingSeries *obj;
  long long answer;
  obj = new CountingSeries();
  clock_t startTime = clock();
  answer = obj->countThem(p0, p1, p2, p3, p4);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p5 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p5;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
  
  long long p0;
  long long p1;
  long long p2;
  long long p3;
  long long p4;
  long long p5;
  
  {
  // ----- test 0 -----
  p0 = 1ll;
  p1 = 1ll;
  p2 = 1ll;
  p3 = 2ll;
  p4 = 1000ll;
  p5 = 1000ll;
  all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
  // ------------------
  }
  
  {
  // ----- test 1 -----
  p0 = 3ll;
  p1 = 3ll;
  p2 = 1ll;
  p3 = 2ll;
  p4 = 1000ll;
  p5 = 343ll;
  all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
  // ------------------
  }
  
  {
  // ----- test 2 -----
  p0 = 40ll;
  p1 = 77ll;
  p2 = 40ll;
  p3 = 100000ll;
  p4 = 40ll;
  p5 = 1ll;
  all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
  // ------------------
  }
  
  {
  // ----- test 3 -----
  p0 = 452ll;
  p1 = 24ll;
  p2 = 4ll;
  p3 = 5ll;
  p4 = 600ll;
  p5 = 10ll;
  all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
  // ------------------
  }
  
  {
  // ----- test 4 -----
  p0 = 234ll;
  p1 = 24ll;
  p2 = 377ll;
  p3 = 1ll;
  p4 = 10000ll;
  p5 = 408ll;
  all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
  // ------------------
  }
  
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
