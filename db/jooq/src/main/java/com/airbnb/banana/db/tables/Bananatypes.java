/*
 * This file is generated by jOOQ.
*/
package com.airbnb.banana.db.tables;


import com.airbnb.banana.db.DefaultSchema;
import com.airbnb.banana.db.Keys;
import com.airbnb.banana.db.tables.records.BananatypesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bananatypes extends TableImpl<BananatypesRecord> {

    private static final long serialVersionUID = 325160199;

    /**
     * The reference instance of <code>BananaTypes</code>
     */
    public static final Bananatypes BANANATYPES = new Bananatypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BananatypesRecord> getRecordType() {
        return BananatypesRecord.class;
    }

    /**
     * The column <code>BananaTypes.id</code>.
     */
    public final TableField<BananatypesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BananaTypes.name</code>.
     */
    public final TableField<BananatypesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>BananaTypes.price</code>.
     */
    public final TableField<BananatypesRecord, Integer> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>BananaTypes</code> table reference
     */
    public Bananatypes() {
        this("BananaTypes", null);
    }

    /**
     * Create an aliased <code>BananaTypes</code> table reference
     */
    public Bananatypes(String alias) {
        this(alias, BANANATYPES);
    }

    private Bananatypes(String alias, Table<BananatypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bananatypes(String alias, Table<BananatypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BananatypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANANATYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BananatypesRecord> getPrimaryKey() {
        return Keys.KEY_BANANATYPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BananatypesRecord>> getKeys() {
        return Arrays.<UniqueKey<BananatypesRecord>>asList(Keys.KEY_BANANATYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bananatypes as(String alias) {
        return new Bananatypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bananatypes rename(String name) {
        return new Bananatypes(name, null);
    }
}
